{
  "hash": "e2000be36eeccc2aac14cc45d143062f",
  "result": {
    "markdown": "## Downloading data {#sec-downloading-data}\n\nPlease make sure to read the [previous chapter](#sec-data-access) on how to getting access to the database.\n\nUsing the REDCap API to access and download data from a database, there are two different approaches:\n\n1.  A focused, \"get what you need\"-approach and\n2.  a more simple \"get it all\"-approach\n\nWorking with longitudinal projects and/or repeated instruments will result in castellated dataset. The package `library(REDCapTidieR)`[@R-REDCapTidieR] provides a solution to the castellation, but downloads full instruments, which is not always desirable.\n\nIn the following, the two approaches will be demonstrated including a possible third approach, requiring a little more technical willingness.\n\n### Focus\n\nThere are different packages to access and download data from R. In the , available tools and packages are referenced. Here I will provide an example, as to download minimal data in a focused way, using REDCapR.[@R-REDCapR].\n\nPlease have a look in the [REDCap-chapter](#redcap-data) for an optimised approach when handling events and repeated instruments.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(REDCapR)\n# Returns the variables \"record_id\" and \"age\".\nds_some_vars <- redcap_read(\n  redcap_uri   = keyring::key_get(\"DB_URI\"),  # This is the address for projects at the AU-server\n  token        = keyring::key_get(\"API_KEY\"),\n  fields       = c(\"record_id\", \"age\")\n)$data \n\n# Return only records with IDs of 1 and 4\nds_some_rows <- redcap_read(\n  redcap_uri   = keyring::key_get(\"DB_URI\"),  # This is the address for projects at the AU-server\n  token        = keyring::key_get(\"API_KEY\"),\n  records      = c(1, 4)\n)$data\n```\n:::\n\n\nTo get a full list of available variable names, you can either go through the codebook on REDCap, or you can try the following, but be aware, that the resulting vector of variable names can get a little long and confusing.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Returns a vector of names of all accessible variables.\nvariable_names <- redcap_read(\n  redcap_uri   = keyring::key_get(\"DB_URI\"),  # This is the address for projects at the AU-server\n  token        = keyring::key_get(\"API_KEY\")\n)$data |> \n  colnames()\n```\n:::\n\n\nHere is an example on how to export data on RBANS and cleaning the data for plotting.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nds <- redcap_read(\n  redcap_uri   = keyring::key_get(\"DB_URI\"),  # This is the address for projects at the AU-server\n  token        = keyring::key_get(\"API_KEY\"),\n  records      = c(1:35), # Downloading data from ID 1 to 35.\n  forms        = \"rbans\", # Downloading only the RBANS instrument\n  event        = c(\"3_months_arm_1\", # Specifying only to download 3 and 12 months data\n                   \"12_months_arm_1\")\n  )$data |> \n  select( # Selecting variables to keep\n    c(\"record_id\",\n      \"redcap_event_name\",\n      ends_with(c(\"_is\",\"_lo\",\"_up\",\"_per\"))) # I only want index scores, lower and upper CIs and percentile.\n         )   |> \n  na.omit() # Omitting IDs with missing data.\nhead(ds, n = 5) # Showing only the first 5 rows\n```\n:::\n\n\nFurther examples and scripts can be found in the [ENIGMA code repository](https://github.com/agdamsbo/ENIGMAtrial_R).\n\n### All at once\n\n### The middle ground\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}