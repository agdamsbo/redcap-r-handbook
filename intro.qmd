# Intro to REDCap data {#redcap-intro}

This section is intended as a "REDCap data manipulation 101" for pre-graduate students in the group and as an intro to getting RStudio set up for work with REDCap data.

In the following is a guide to get started working on REDCap data in R using the [REDCapR-package](https://ouhscbbmc.github.io/REDCapR/).[@R-REDCapR]

Following the package link provides an extensive description on workflows and functionality. However, sometimes less is more, and so goes.

A more thorough discussion on REDCap data can be found later as well as a chapter on tips to building a REDCap database.

## Getting access

Before you are able to get any data out of REDCap, make sure that you are able to get in. After you are logged in, make sure, that you have permissions to get an API-key. The API-key is a alpha-numeric key used to verify yourself to the REDCap server, when requesting data export.

The API key equals user name and password, and circumvents the two-factor verification process. Naturally, the API key should be kept in a safe way. To be clear: *DO NEVER STORE THE API-KEY AS PLAIN TEXT*.

The `library(keyring)`[@R-keyring] offers a safe and easy way to store API keys and other secrets. Please copy and run the code below:

```{r api-storage, eval=FALSE}
require(keyring)
key_set("API_KEY", prompt = "API key: ")
```

Do note, that the name "API_KEY" can be changed to whatever you prefer. Note that the function will overwrite any existing keys with the same name without any warning (!).

## Downloading data

There are different packages to access and download data from R. In the [REDCap-tools repository](https://redcap-tools.github.io/projects/), available tools and packages are referenced. Here I will provide an example, as to download minimal data in a focused way, using REDCapR.[@R-REDCapR]. 

Please have a look in the [REDCap-chapter](#redcap-data) for an optimised approach when handling events and repeated instruments.

```{r readcapr-start, eval=FALSE}
library(REDCapR)
# Returns the variables "record_id" and "age".
ds_some_vars <- redcap_read(
  redcap_uri   = "https://redcap.au.dk/api/",  # This is the address for projects at the AU-server
  token        = keyring::key_get("API_KEY"),
  fields       = c("record_id", "age")
)$data 

# Return only records with IDs of 1 and 4
ds_some_rows <- redcap_read(
  redcap_uri   = "https://redcap.au.dk/api/",  # This is the address for projects at the AU-server
  token        = keyring::key_get("API_KEY"),
  records      = c(1, 4)
)$data
```

To get a full list of available variable names, you can either go through the codebook on REDCap, or you can try the following, but be aware, that the resulting vector of variable names can get a little long and confusing.

```{r readcapr-colnames, eval=FALSE}
# Returns a vector of names of all accessible variables.
variable_names <- redcap_read(
  redcap_uri   = "https://redcap.au.dk/api/",  # This is the address for projects at the AU-server
  token        = keyring::key_get("API_KEY")
)$data |> 
  colnames()
```


Here is an example on how to export data on RBANS and cleaning the data for plotting.

```{r readcapr-example, eval=FALSE}
ds <- redcap_read(
  redcap_uri   = "https://redcap.au.dk/api/",  # This is the address for projects at the AU-server
  token        = "YOUR_API_KEY_GOES_HERE",
  records      = c(1:35), # Downloading data from ID 1 to 35.
  forms        = "rbans", # Downloading only the RBANS instrument
  event        = c("3_months_arm_1", # Specifying only to download 3 and 12 months data
                   "12_months_arm_1")
  )$data |> 
  select( # Selecting variables to keep
    c("record_id",
      "redcap_event_name",
      ends_with(c("_is","_lo","_up","_per"))) # I only want index scores, lower and upper CIs and percentile.
         )   |> 
  na.omit() # Omitting IDs with missing data.
head(ds, n = 5) # Showing only the first 5 rows
```

Further examples and scripts can be found in the [ENIGMA code repository](https://github.com/agdamsbo/ENIGMAtrial_R).

